#pragma once
#include "Context.h"
#include <map>
#include <vector>

using namespace std;

struct Stats {
	float tat;
	float wt;
	float rt;
	float elapesdTime;

	Stats() : tat(0), wt(0), rt(0), elapesdTime(0) {}
};

class Consumer
{
public:
	Consumer(Buffer* buffer);
	void printTimeSheet();
	void printStats();
	Stats getStatsOf(int pid);
	void consume();
	int numberOfConsumedProc();

private:
	Buffer* _buffer;	// the global buffer used form context passing

	// time sheet logs generated by consumer as it consumes a context from buffer
	map<int, vector<pair<int, int > > > _timeSheet;

	// history of the latest context for each pid
	map<int, Context> _history;

	int _lastShareTime;	// finishd time of the last consumed proccess

};

